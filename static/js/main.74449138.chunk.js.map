{"version":3,"sources":["Component/Card.js","Component/RobotList.js","Component/SearchBox.js","Component/Scroll.js","Component/ErrorBoundries.js","Container/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","mailId","className","src","RobotList","robots","lenght","map","data","i","key","email","SearchBox","searchChange","placeholder","onChange","type","Scroll","style","overflowY","border","height","children","ErrorBoundries","state","gotIssue","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredArray","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wSAeeA,EAbF,SAACC,GAAW,IACdC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,OACjB,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,mBACR,6BACI,4BAAKC,GACL,2BAAIC,MCULG,G,MAfG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACpB,OAAOA,EAAOC,OAAS,uCAEf,yBAAKP,GAAG,QAAQG,UAAU,OAElBG,EAAOE,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGV,GAAIA,GAAIM,EAAOI,GAAGV,GAAIC,KAAMK,EAAOI,GAAGT,KAAMC,OAAQI,EAAOI,GAAGE,cCG5FC,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCACjBY,YAAY,eACZC,SAAUF,EACVG,KAAK,aCCFC,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEvB,EAAMwB,WCaJC,E,kDAfX,WAAYzB,GAAQ,IAAD,8BACf,gBACK0B,MAAQ,CACTC,UAAU,GAHC,E,gEAOfC,KAAKC,SAAS,CAACF,UAAU,M,+BAGzB,OAAOC,KAAKF,MAAMC,SAAW,iEAA6CC,KAAK5B,MAAMwB,a,GAXhEM,IAAMC,WC6CpBC,G,wDAtCX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAfzC,EAAKX,MAAQ,CACTnB,OAAQ,GACR4B,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKb,SAAS,CAACtB,OAAQmC,S,+BAOrB,IAAD,EAC0Bd,KAAKF,MAA7BnB,EADF,EACEA,OAAQ4B,EADV,EACUA,YACTQ,EAAgBpC,EAAOqC,QAAO,SAAAC,GAChC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAEzD,OACI,yBAAK1C,UAAU,MACX,4CACA,kBAAC,EAAD,CAAWW,aAAca,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAW1B,OAAQoC,W,GA/BzBb,IAAMC,YCIJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74449138.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Card = (props) => {\r\n    const {id, name, mailId} = props;\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\r\n            <img src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{mailId}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./RobotList.css\"\r\n\r\nconst RobotList = ({robots}) => {\r\nreturn robots.lenght ? <h1>Loadign</h1> :\r\n    (\r\n        <div id=\"cards\" className=\"ma2\">\r\n            {\r\n                robots.map((data, i) => {\r\n                    return (\r\n                        <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} mailId={robots[i].email}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RobotList;","import React from \"react\";\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n            placeholder='Search Robot'\r\n            onChange={searchChange}\r\n            type=\"search\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '400px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nclass ErrorBoundries extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            gotIssue: false\r\n        }\r\n    }\r\n    componentDidCatch() {\r\n        this.setState({gotIssue: true})\r\n    }\r\n    render() {\r\n        return this.state.gotIssue ? <h1>Ooops sorry for the inconvenience</h1> : this.props.children;\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundries","import React from \"react\";\r\nimport RobotList from \"../Component/RobotList\";\r\nimport SearchBox from \"../Component/SearchBox\";\r\nimport Scroll from \"../Component/Scroll\";\r\nimport ErrorBoundries from \"../Component/ErrorBoundries\"\r\nimport \"./App.css\"\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {\r\n            this.setState({robots: users});\r\n        })\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n    render() {\r\n        const {robots, searchField } = this.state;\r\n        const filteredArray = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1>RobotFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundries>\r\n                        <RobotList robots={filteredArray}/>\r\n                    </ErrorBoundries>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"tachyons\";\nimport App from \"./Container/App\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}